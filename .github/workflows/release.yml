name: Release

workflow_dispatch:
  inputs:
    version:
      description: 'Version to release'
      required: true
      default: 'latest'

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Run tests
        run: |
          cargo fmt --all -- --check
          cargo clippy -- -D warnings
          cargo test

  release:
    needs: test
    name: Release - ${{ matrix.platform.release_for }}
    strategy:
      matrix:
        platform:
          - release_for: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: observer
            name: observer-linux-amd64
          - release_for: Linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: observer
            name: observer-linux-arm64
          - release_for: Linux-armv7
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            bin: observer
            name: observer-linux-armv7

    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      
      - name: Install cross
        run: cargo install cross
      
      - name: Build binary
        run: |
          for target in ${{ matrix.platform.target }}; do
            cross build --release --target $target
          done
          
      - name: Prepare release assets
        run: |
          mkdir -p release
          cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }} release/${{ matrix.platform.name }}
          cp config.toml release/
          cp observer.service release/
          cp install.sh release/
          cd release && tar czf ../${{ matrix.platform.name }}.tar.gz *
      
      - name: Generate checksums
        run: |
          cd release
          sha256sum ${{ matrix.platform.name }} > ${{ matrix.platform.name }}.sha256
          
      - name: Upload release with checksums
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ matrix.platform.name }}.tar.gz
            ${{ matrix.platform.name }}.sha256

  aur-publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Update PKGBUILD
        run: |
          PKGVER="${{ steps.vars.outputs.PKGVER }}"
          REPO_URL="${{ steps.vars.outputs.REPO_URL }}"
          DL_URL="${{ steps.vars.outputs.DOWNLOAD_URL }}" # Re-fetch or pass via env
          SHA_AMD64="${{ steps.checksums.outputs.SHA_AMD64 }}"
          SHA_ARM64="${{ steps.checksums.outputs.SHA_ARM64 }}"
          SHA_ARMV7="${{ steps.checksums.outputs.SHA_ARMV7 }}"

          echo "Updating PKGBUILD for version $PKGVER..."

          # Update pkgver
          sed -i "s/^pkgver=.*/pkgver=$PKGVER/" PKGBUILD
          # Reset pkgrel
          sed -i "s/^pkgrel=.*/pkgrel=1/" PKGBUILD
          # Update source URLs (using :: to rename the downloaded file)
          sed -i "s|^source_x86_64=.*|source_x86_64=("observer-\$pkgver-amd64.tar.gz::$DL_URL/observer-linux-amd64.tar.gz")|" PKGBUILD
          sed -i "s|^source_aarch64=.*|source_aarch64=("observer-\$pkgver-arm64.tar.gz::$DL_URL/observer-linux-arm64.tar.gz")|" PKGBUILD
          sed -i "s|^source_armv7h=.*|source_armv7h=("observer-\$pkgver-armv7.tar.gz::$DL_URL/observer-linux-armv7.tar.gz")|" PKGBUILD
          # Update sha256sums
          sed -i "s/^sha256sums_x86_64=.*/sha256sums_x86_64=('$SHA_AMD64')/" PKGBUILD
          sed -i "s/^sha256sums_aarch64=.*/sha256sums_aarch64=('$SHA_ARM64')/" PKGBUILD
          sed -i "s/^sha256sums_armv7h=.*/sha256sums_armv7h=('$SHA_ARMV7')/" PKGBUILD

          echo "PKGBUILD updated:"
          cat PKGBUILD
          
      - name: Generate .SRCINFO
        run: |
          docker run --rm -v $PWD:/pkg -w /pkg archlinux:base-devel bash -c '
              pacman -Syu --noconfirm && 
              pacman -S --noconfirm pacman-contrib &&
              useradd builduser -m &&
              chown -R builduser:builduser /pkg &&
              su builduser -c "makepkg --printsrcinfo > .SRCINFO"
          '

      - name: Publish to AUR
        uses: KSXGitHub/github-actions-deploy-aur@v3.0.1
        with:
          pkgname: observer
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Update to version ${{ github.ref_name }}"