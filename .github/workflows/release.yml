name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix)'
        required: true
        type: string
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # Needed for uploading release assets

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1  # Better error reporting

jobs:
  # Validate and test the code before building releases
  validate:
    name: Test & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Run code formatting check
        run: cargo fmt --all -- --check
      
      - name: Run linter
        run: cargo clippy -- -D warnings
      
      - name: Run tests
        run: cargo test

  # Build releases for multiple architectures
  release:
    needs: validate
    name: Build ${{ matrix.platform.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false  # Continue with other builds if one fails
      matrix:
        platform:
          - target: x86_64-unknown-linux-gnu
            name: observer-linux-amd64
            arch_name: amd64
            arch_pkg: x86_64
            gcc_package: gcc
          - target: aarch64-unknown-linux-gnu
            name: observer-linux-arm64
            arch_name: arm64
            arch_pkg: aarch64
            gcc_package: gcc-aarch64-linux-gnu
          - target: armv7-unknown-linux-gnueabihf
            name: observer-linux-armv7
            arch_name: armv7
            arch_pkg: armv7h
            gcc_package: gcc-arm-linux-gnueabihf

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install cross-compilation dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.platform.gcc_package }}
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            ~/.cargo/bin/cross
          key: ${{ runner.os }}-cargo-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.platform.target }}-
            ${{ runner.os }}-cargo-
      
      - name: Install cross
        run: |
          if ! command -v cross &> /dev/null; then
            cargo install cross
          fi
      
      - name: Build binary
        run: cross build --release --target ${{ matrix.platform.target }}
      
      - name: Create release archive
        run: |
          mkdir -p release
          cp target/${{ matrix.platform.target }}/release/observer release/${{ matrix.platform.name }}
          cp config.toml release/
          cp observer.service release/
          cp install.sh release/
          cd release && tar czf ../${{ matrix.platform.name }}.tar.gz *
      
      - name: Generate checksums
        id: checksums
        run: |
          cd release
          sha256sum ${{ matrix.platform.name }} > ${{ matrix.platform.name }}.sha256
          echo "SHA=$(cut -d' ' -f1 ${{ matrix.platform.name }}.sha256)" >> $GITHUB_OUTPUT
      
      - name: Upload artifacts for AUR job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}-artifacts
          path: |
            ${{ matrix.platform.name }}.tar.gz
            release/${{ matrix.platform.name }}.sha256
          retention-days: 1
      
      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Use manual input version
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "TAG=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Use tag name for tag-triggered workflow
            TAG_NAME="${{ github.ref_name }}"
            VERSION="${TAG_NAME#v}"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "TAG=$TAG_NAME" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ matrix.platform.name }}.tar.gz
            release/${{ matrix.platform.name }}.sha256
          name: Observer v${{ steps.version.outputs.VERSION }}
          tag_name: ${{ steps.version.outputs.TAG || github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: true

  # Publish package to AUR (Arch User Repository)
  aur-publish:
    name: Publish to AUR
    needs: release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Extract version info
        id: vars
        run: |
          TAG_NAME="${{ github.ref_name }}"
          # Remove 'v' prefix from tag for PKGVER
          PKGVER="${TAG_NAME#v}" 
          REPO_URL="https://github.com/${{ github.repository }}"
          DL_URL="$REPO_URL/releases/download/$TAG_NAME"
          
          echo "PKGVER=$PKGVER" >> $GITHUB_OUTPUT
          echo "REPO_URL=$REPO_URL" >> $GITHUB_OUTPUT
          echo "DOWNLOAD_URL=$DL_URL" >> $GITHUB_OUTPUT
      
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      
      - name: Extract checksums
        id: checksums
        run: |
          SHA_AMD64=$(cut -d' ' -f1 ./artifacts/observer-linux-amd64-artifacts/observer-linux-amd64.sha256)
          SHA_ARM64=$(cut -d' ' -f1 ./artifacts/observer-linux-arm64-artifacts/observer-linux-arm64.sha256)
          SHA_ARMV7=$(cut -d' ' -f1 ./artifacts/observer-linux-armv7-artifacts/observer-linux-armv7.sha256)
          
          # Validate checksums aren't empty
          if [[ -z "$SHA_AMD64" || -z "$SHA_ARM64" || -z "$SHA_ARMV7" ]]; then
            echo "Error: One or more checksums are empty"
            echo "AMD64: $SHA_AMD64"
            echo "ARM64: $SHA_ARM64"
            echo "ARMV7: $SHA_ARMV7"
            exit 1
          fi
          
          echo "SHA_AMD64=$SHA_AMD64" >> $GITHUB_OUTPUT
          echo "SHA_ARM64=$SHA_ARM64" >> $GITHUB_OUTPUT
          echo "SHA_ARMV7=$SHA_ARMV7" >> $GITHUB_OUTPUT
          
          echo "Checksums extracted:"
          echo "AMD64: $SHA_AMD64"
          echo "ARM64: $SHA_ARM64"
          echo "ARMV7: $SHA_ARMV7"
      
      - name: Update PKGBUILD
        run: |
          PKGVER="${{ steps.vars.outputs.PKGVER }}"
          REPO_URL="${{ steps.vars.outputs.REPO_URL }}"
          DL_URL="${{ steps.vars.outputs.DOWNLOAD_URL }}" 
          SHA_AMD64="${{ steps.checksums.outputs.SHA_AMD64 }}"
          SHA_ARM64="${{ steps.checksums.outputs.SHA_ARM64 }}"
          SHA_ARMV7="${{ steps.checksums.outputs.SHA_ARMV7 }}"
          
          # Ensure all variables are set
          if [[ -z "$PKGVER" || -z "$DL_URL" || -z "$SHA_AMD64" || -z "$SHA_ARM64" || -z "$SHA_ARMV7" ]]; then
            echo "Error: Required variables for PKGBUILD update are empty"
            echo "PKGVER: $PKGVER"
            echo "DL_URL: $DL_URL"
            echo "SHA_AMD64: $SHA_AMD64"
            echo "SHA_ARM64: $SHA_ARM64"
            echo "SHA_ARMV7: $SHA_ARMV7"
            exit 1
          fi
          
          echo "Updating PKGBUILD for version $PKGVER..."
          
          # Update pkgver with proper delimiter to handle slashes
          sed -i "s|^pkgver=.*|pkgver=$PKGVER|" PKGBUILD 
          
          # Reset pkgrel
          sed -i "s|^pkgrel=.*|pkgrel=1|" PKGBUILD
          
          # Escape slashes in DL_URL for sed
          DL_URL_ESC=$(sed 's/\//\\\//g' <<< "$DL_URL")
          
          # Update source URLs with proper quoting
          sed -i "s|^source_x86_64=.*|source_x86_64=(\"observer-\$pkgver-amd64.tar.gz::$DL_URL_ESC/observer-linux-amd64.tar.gz\")|" PKGBUILD
          sed -i "s|^source_aarch64=.*|source_aarch64=(\"observer-\$pkgver-arm64.tar.gz::$DL_URL_ESC/observer-linux-arm64.tar.gz\")|" PKGBUILD
          sed -i "s|^source_armv7h=.*|source_armv7h=(\"observer-\$pkgver-armv7.tar.gz::$DL_URL_ESC/observer-linux-armv7.tar.gz\")|" PKGBUILD
          
          # Update checksums
          sed -i "s|^sha256sums_x86_64=.*|sha256sums_x86_64=('$SHA_AMD64')|" PKGBUILD
          sed -i "s|^sha256sums_aarch64=.*|sha256sums_aarch64=('$SHA_ARM64')|" PKGBUILD
          sed -i "s|^sha256sums_armv7h=.*|sha256sums_armv7h=('$SHA_ARMV7')|" PKGBUILD
          
          echo "PKGBUILD updated successfully"
      
      - name: Show updated PKGBUILD
        run: cat PKGBUILD
      
      - name: Pull Arch Linux Docker image
        run: docker pull archlinux:base-devel
      
      - name: Generate .SRCINFO
        run: |
          docker run --rm -v $PWD:/pkg -w /pkg \
            archlinux:base-devel bash -c '
              pacman -Syu --noconfirm && 
              pacman -S --noconfirm pacman-contrib &&
              useradd builduser -m &&
              chown -R builduser:builduser /pkg &&
              su builduser -c "makepkg --printsrcinfo > .SRCINFO"
            '
      
      - name: Deploy to AUR
        uses: KSXGitHub/github-actions-deploy-aur@v4.1.1
        with:
          pkgname: observer
          pkgbuild: ./PKGBUILD
          commit_username: ${{ secrets.AUR_USERNAME }}
          commit_email: ${{ secrets.AUR_EMAIL }}
          ssh_private_key: ${{ secrets.AUR_SSH_PRIVATE_KEY }}
          commit_message: "Update to version ${{ steps.vars.outputs.PKGVER }}"